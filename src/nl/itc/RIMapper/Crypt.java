package nl.itc.RIMapper;import java.io.IOException;import java.io.UnsupportedEncodingException;import java.security.InvalidKeyException;import java.security.NoSuchAlgorithmException;import java.security.spec.InvalidKeySpecException;import java.security.spec.KeySpec;import javax.crypto.BadPaddingException;import javax.crypto.Cipher;import javax.crypto.IllegalBlockSizeException;import javax.crypto.NoSuchPaddingException;import javax.crypto.SecretKey;import javax.crypto.SecretKeyFactory;import javax.crypto.spec.DESKeySpec;import sun.misc.BASE64Decoder;import sun.misc.BASE64Encoder;public class Crypt {        SecretKey key;    Cipher cipher;        public Crypt(String encryptionKey) {        try {            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");            byte [] keyAsBytes = encryptionKey.getBytes("UTF-8");            KeySpec keySpec = new DESKeySpec(keyAsBytes);            cipher = Cipher.getInstance("DES");            key = keyFactory.generateSecret( keySpec );        } catch (NoSuchAlgorithmException e) {        } catch (UnsupportedEncodingException e) {        } catch (InvalidKeyException e) {        } catch (NoSuchPaddingException e) {        } catch (InvalidKeySpecException e) {        } finally {        }    }    //    public Crypt() {//        this("RIMapperEncryptionKey");//    }        public String encrypt(String unencryptedString) {        String result = unencryptedString;        try {            cipher.init( Cipher.ENCRYPT_MODE, key );            byte[] cleartext = unencryptedString.getBytes("UTF-8");            byte[] ciphertext = cipher.doFinal( cleartext );            BASE64Encoder base64encoder = new BASE64Encoder();            result = base64encoder.encode( ciphertext );        } catch (IllegalBlockSizeException e) {        } catch (BadPaddingException e) {        } catch (InvalidKeyException e) {        } catch (UnsupportedEncodingException e) {        } finally {        }        return result;    }        public String decrypt(String encryptedString)    {        String result = encryptedString;        try {            cipher.init( Cipher.DECRYPT_MODE, key );            BASE64Decoder base64decoder = new BASE64Decoder();            byte[] cleartext = base64decoder.decodeBuffer( encryptedString );            byte[] ciphertext = cipher.doFinal( cleartext );            StringBuffer stringBuffer = new StringBuffer();            for (int i = 0; i < ciphertext.length; i++)                stringBuffer.append( (char) ciphertext[i] );            result = stringBuffer.toString();        } catch (UnsupportedEncodingException e) {        } catch (InvalidKeyException e) {        } catch (IOException e) {        } catch (IllegalBlockSizeException e) {        } catch (BadPaddingException e) {        } finally {        }        return result;            }}